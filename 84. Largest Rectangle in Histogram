class Solution {

  vector<int> nextSmallerElement(vector<int>& heights)  {
      stack<int> s;
      s.push(-1);

      vector<int> next(heights.size());

      for(int i=(heights.size()-1); i>=0; i--){
          int e = heights[i];
          while(s.top() != -1 && heights[s.top()]>=e){
              s.pop();
          }
          next[i] = s.top();
          s.push(i);
      }

      return next;
  }

  vector<int> previousSmallerElement(vector<int>& heights)  {
      stack<int> s;
      s.push(-1);

      vector<int> prev(heights.size());

      for(int i=0; i<heights.size(); i++){
          int e = heights[i];
          while(s.top() != -1 && heights[s.top()]>=e){
              s.pop();
          }
          prev[i] = s.top();
          s.push(i);
      }

      return prev;
  }

public:
    int largestRectangleArea(vector<int>& heights) {
        vector<int> prev(heights.size());
        prev = previousSmallerElement(heights);
        vector<int> next(heights.size());
        next = nextSmallerElement(heights);
        int ans = INT_MIN;
        for(int i=0; i<heights.size(); i++){
            int l = heights[i];
            
            if(next[i] == -1){
                next[i] = heights.size();
            }

            int b = next[i] - prev[i] - 1;
            ans = max(ans, l*b);


        }

        return ans;
    }
};
